Meilenstein2\SmartNutritionPlanner\frontend\public\account.html
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Konto</title>
  <style>
    :root {
      --primary: #4CAF50;
      --bg: #f4f4f4;
    }

    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: var(--bg);
      color: #333;
    }

    header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      background-color: var(--primary);
      color: white;
    }

    .menu-icon {
      font-size: 1.5rem;
      cursor: pointer;
    }

    .sidebar {
      position: fixed;
      top: 0;
      left: -70%;
      width: 70%;
      height: 100%;
      background-color: #333;
      color: white;
      padding: 2rem 1rem;
      transition: left 0.3s ease-in-out;
      z-index: 1000;
    }

    .sidebar.active {
      left: 0;
    }

    .sidebar nav a {
      display: block;
      color: white;
      padding: 1rem 0;
      text-decoration: none;
      border-bottom: 1px solid #555;
    }

    .section {
      padding: 1.5rem;
    }

    .user-icon {
      font-size: 3rem;
      text-align: center;
      margin-bottom: 1rem;
    }

    .field {
      margin-bottom: 1rem;
    }

    label {
      display: block;
      font-weight: bold;
      margin-bottom: 0.3rem;
    }

    input, select {
      width: 100%;
      padding: 0.5rem;
      font-size: 1rem;
      border-radius: 5px;
      border: 1px solid #ccc;
    }

    .btn-row {
      display: flex;
      gap: 1rem;
      margin-top: 1.5rem;
    }

    .btn-row button {
      flex: 1;
      padding: 0.7rem;
      font-size: 1rem;
      border: none;
      border-radius: 5px;
      color: white;
    }

    .btn-edit {
      background-color: #888;
    }

    .btn-save {
      background-color: var(--primary);
    }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <nav>
      <a href="/public/index.html">Home</a>
      <a href="/public/add-product.html">Artikel hinzuf√ºgen</a>
      <a href="/public/recipes.html">Rezepte</a>
      <a href="/public/create-recipe.html">Rezept erstellen</a>
      <a href="/public/shopping-list.html">Einkaufsliste</a>
      <a href="/public/info.html">Infoseite</a>
      <a href="/public/account.html">Konto</a>
    </nav>
  </div>

  <!-- Header -->
  <header>
    <span class="menu-icon" onclick="toggleMenu()">‚ò∞</span>
    <h2>Mein Konto</h2>
  </header>

  <!-- Inhalt -->
  <div class="section">
    <div class="user-icon">üë§</div>

    <div class="field">
      <label>Vorname & Nachname</label>
      <input type="text" id="name" disabled>
    </div>

    <div class="field">
      <label>Alter</label>
      <input type="number" id="age" disabled>
    </div>

    <div class="field">
      <label>Geschlecht</label>
      <select id="gender" disabled>
        <option value="">Bitte w√§hlen</option>
        <option value="m">M√§nnlich</option>
        <option value="w">Weiblich</option>
        <option value="d">Divers</option>
      </select>
    </div>

    <div class="field">
      <label>Gr√∂√üe (cm)</label>
      <input type="number" id="height" disabled>
    </div>

    <div class="field">
      <label>Gewicht (kg)</label>
      <input type="number" id="weight" disabled>
    </div>

    <div class="field">
      <label>Kcal-Ziel pro Tag</label>
      <input type="number" id="kcalTarget" disabled>
    </div>

    <div class="field">
      <label>Ern√§hrungsart</label>
      <select id="dietType" disabled>
        <option value="">Bitte w√§hlen</option>
        <option>Vegan</option>
        <option>Vegetarisch</option>
        <option>Omnivor</option>
      </select>
    </div>

    <div class="btn-row">
      <button class="btn-edit" onclick="toggleEdit()">‚úèÔ∏è Bearbeiten</button>
      <button class="btn-save" onclick="saveData()">üíæ Speichern</button>
    </div>
  </div>

  <script>
    function toggleMenu() {
      document.getElementById("sidebar").classList.toggle("active");
    }

    function toggleEdit() {
      const fields = document.querySelectorAll("input, select");
      fields.forEach(f => f.disabled = !f.disabled);
    }

    function saveData() {
      const userData = {
        name: document.getElementById("name").value,
        age: document.getElementById("age").value,
        gender: document.getElementById("gender").value,
        height: document.getElementById("height").value,
        weight: document.getElementById("weight").value,
        kcalTarget: document.getElementById("kcalTarget").value,
        dietType: document.getElementById("dietType").value
      };
      localStorage.setItem("userData", JSON.stringify(userData));
      alert("Daten gespeichert!");
    }

    function loadData() {
      const data = JSON.parse(localStorage.getItem("userData") || "{}");
      if (!data) return;

      document.getElementById("name").value = data.name || "";
      document.getElementById("age").value = data.age || "";
      document.getElementById("gender").value = data.gender || "";
      document.getElementById("height").value = data.height || "";
      document.getElementById("weight").value = data.weight || "";
      document.getElementById("kcalTarget").value = data.kcalTarget || "";
      document.getElementById("dietType").value = data.dietType || "";
    }

    loadData();
  </script>
</body>
</html>

----

Meilenstein2\SmartNutritionPlanner\frontend\public\recipes.html
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Rezepte</title>
  <style>
    :root {
      --primary: #4CAF50;
      --secondary: #388E3C;
      --danger: #d32f2f;
      --bg: #f4f4f4;
      --text-dark: #333;
    }

    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: var(--bg);
      color: var(--text-dark);
      padding-bottom: 100px;
    }

    header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      background-color: var(--primary);
      color: white;
    }

    .menu-icon {
      font-size: 1.5rem;
      cursor: pointer;
    }

    .sidebar {
      position: fixed;
      top: 0;
      left: -70%;
      width: 70%;
      height: 100%;
      background-color: #333;
      color: white;
      padding: 2rem 1rem;
      transition: left 0.3s ease-in-out;
      z-index: 1000;
    }

    .sidebar.active {
      left: 0;
    }

    .sidebar nav a {
      display: block;
      color: white;
      padding: 1rem 0;
      text-decoration: none;
      border-bottom: 1px solid #555;
    }

    .icon-button {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1.3rem;
      color: white;
    }

    .section-title {
      font-weight: bold;
      font-size: 1.1rem;
      margin: 1rem 1rem 0.3rem;
    }

    .card-list {
      padding: 0 1rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .recipe-card {
      background: white;
      padding: 1rem;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      position: relative;
    }

    .recipe-card h3 {
      margin-bottom: 0.5rem;
      font-size: 1.1rem;
    }

    .recipe-card .row {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      margin: 2px 0;
    }

    /* Einkaufswagen-Button */
    .cart-icon {
      position: absolute;
      top: 10px;
      right: 40px;
      font-size: 1.3rem;
      color: var(--secondary);
      cursor: pointer;
      background: none;
      border: none;
    }

    /* ‚Äû+‚Äú-Button */
    .plus-icon {
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 1.3rem;
      color: var(--primary);
      cursor: pointer;
      background: none;
      border: none;
    }

    .remove-icon {
      display: none;
      position: absolute;
      top: 10px;
      right: 70px; /* im Delete-Mode sichtbar */
      font-size: 1.3rem;
      color: var(--danger);
      cursor: pointer;
    }

    .remove-mode .remove-icon {
      display: block;
    }

    /* ‚Äû+‚Äú-Button f√ºr neue Rezepte (unten rechts) */
    .add-button {
      position: fixed;
      bottom: 1.5rem;
      right: 1.5rem;
      background-color: var(--primary);
      color: white;
      font-size: 2rem;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      text-decoration: none;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .no-recipes {
      padding: 1rem;
      font-style: italic;
      color: #666;
    }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <nav>
      <a href="/public/index.html">Home</a>
      <a href="/public/add-product.html">Artikel hinzuf√ºgen</a>
      <a href="/public/recipes.html">Rezepte</a>
      <a href="/public/create-recipe.html">Rezept erstellen</a>
      <a href="/public/shopping-list.html">Einkaufsliste</a>
      <a href="/public/info.html">Infoseite</a>
      <a href="/public/account.html">Konto</a>
    </nav>
  </div>

  <!-- Header -->
  <header>
    <span class="menu-icon" onclick="toggleMenu()">‚ò∞</span>
    <h2>Rezepte</h2>
    <button class="icon-button" onclick="toggleDeleteMode()">üóëÔ∏è</button>
  </header>

  <!-- Empfohlene Rezepte -->
  <div class="section-title">Empfohlene Rezepte</div>
  <div class="card-list" id="recommendedRecipes">
    <div class="no-recipes" id="noRecipesMsg">Lade Rezepte‚Ä¶</div>
  </div>

  <!-- Eigene Rezepte -->
  <div class="section-title">Meine Rezepte</div>
  <div class="card-list" id="ownRecipes"></div>

  <!-- ‚Äû+‚Äú-Button f√ºr neue Rezepte -->
  <a href="/public/create-recipe.html" class="add-button">+</a>

  <script>
    // Sidebar ein/ausklappen
    function toggleMenu() {
      document.getElementById("sidebar").classList.toggle("active");
    }

    // Delete-Mode umschalten (zeigt den roten ‚Äû‚ûñ‚Äú-Button bei eigenen Rezepten)
    function toggleDeleteMode() {
      document.body.classList.toggle("remove-mode");
    }

    // ========================================================
    // 1) Eigene Rezepte laden aus localStorage
    //    (analog zu vorher, mit Hinzuf√ºgen von Cart- und Plus-Button)
    // ========================================================
    function loadOwnRecipes() {
      const container = document.getElementById("ownRecipes");
      const data = JSON.parse(localStorage.getItem("ownRecipes") || "[]");
      container.innerHTML = "";

      if (data.length === 0) {
        const placeholder = document.createElement("div");
        placeholder.className = "no-recipes";
        placeholder.textContent = "Du hast noch keine eigenen Rezepte erstellt.";
        container.appendChild(placeholder);
        return;
      }

      data.forEach((recipe, index) => {
        const card = document.createElement("div");
        card.className = "recipe-card";

        // Entfernen-Button (nur im Remove-Mode sichtbar)
        const removeBtn = document.createElement("button");
        removeBtn.className = "remove-icon";
        removeBtn.innerHTML = "‚ûñ";
        removeBtn.title = "Rezept l√∂schen";
        removeBtn.onclick = () => {
          const arr = JSON.parse(localStorage.getItem("ownRecipes") || "[]");
          arr.splice(index, 1);
          localStorage.setItem("ownRecipes", JSON.stringify(arr));
          loadOwnRecipes();
        };
        card.appendChild(removeBtn);

        // Einkaufswagen-Button
        const cartBtn = document.createElement("button");
        cartBtn.className = "cart-icon";
        cartBtn.innerHTML = "üõí";
        cartBtn.title = "Zutaten in die Einkaufsliste √ºbernehmen";
        cartBtn.onclick = () => addProductsToShoppingList(recipe.produkte);
        card.appendChild(cartBtn);

        // Plus-Button
        const plusBtn = document.createElement("button");
        plusBtn.className = "plus-icon";
        plusBtn.textContent = "+";
        plusBtn.title = "Weitere Aktion‚Ä¶";
        // Hier sp√§ter: plusBtn.onclick = ‚Ä¶ ;
        card.appendChild(plusBtn);

        // Rezeptname
        const title = document.createElement("h3");
        title.textContent = recipe.name;
        card.appendChild(title);

        // Eigene Produkte anzeigen (Name: kcal)
        recipe.produkte.forEach(p => {
          const rowDiv = document.createElement("div");
          rowDiv.className = "row";
          // Anzeige: Produktname und ggf. kcal-Wert
          rowDiv.innerHTML = `<span>${p.name}:</span><span>${p.kcal}</span>`;
          card.appendChild(rowDiv);
        });

        container.appendChild(card);
      });
    }

    // ========================================================
    // 2) Empfohlene Rezepte laden aus recipes.json
    //    (mit Hinzuf√ºgen von Cart- und Plus-Button)
    // ========================================================
    async function loadRecommendedRecipes() {
      const userData = JSON.parse(localStorage.getItem("userData") || "{}");
      const dietType = userData.dietType || "";
      const container = document.getElementById("recommendedRecipes");
      container.innerHTML = ""; // zun√§chst leeren

      if (!dietType) {
        const msg = document.createElement("div");
        msg.className = "no-recipes";
        msg.textContent = "Bitte w√§hle zuerst eine Ern√§hrungsart in Deinem Konto aus.";
        container.appendChild(msg);
        return;
      }

      try {
        const response = await fetch("recipes.json");
        if (!response.ok) throw new Error("Konnte recipes.json nicht laden.");
        const allRecipes = await response.json();

        // Wenn f√ºr diese Di√§t keine Rezepte vorhanden sind
        if (!allRecipes[dietType] || Object.keys(allRecipes[dietType]).length === 0) {
          const msg = document.createElement("div");
          msg.className = "no-recipes";
          msg.textContent = "F√ºr die gew√§hlte Ern√§hrungsart wurden keine Rezepte gefunden.";
          container.appendChild(msg);
          return;
        }

        // √úber alle Mahlzeiten (Fr√ºhst√ºck, Mittagessen, Abendessen) iterieren
        Object.values(allRecipes[dietType]).forEach(recipe => {
          const card = document.createElement("div");
          card.className = "recipe-card";

          // Einkaufswagen-Button: √ºbergibt das Array ‚Äûprodukte‚Äú aus recipes.json
          const cartBtn = document.createElement("button");
          cartBtn.className = "cart-icon";
          cartBtn.innerHTML = "üõí";
          cartBtn.title = "Zutaten in die Einkaufsliste √ºbernehmen";
          cartBtn.onclick = () => addProductsToShoppingList(recipe.produkte);
          card.appendChild(cartBtn);

          // Plus-Button
          const plusBtn = document.createElement("button");
          plusBtn.className = "plus-icon";
          plusBtn.textContent = "+";
          plusBtn.title = "Weitere Aktion‚Ä¶";
          // Hier sp√§ter: plusBtn.onclick = ‚Ä¶ ;
          card.appendChild(plusBtn);

          // Rezeptname
          const title = document.createElement("h3");
          title.textContent = recipe.name;
          card.appendChild(title);

          // N√§hrwerte anzeigen (Kalorien, Fett, Kohlenhydrate, Protein)
          const nv = recipe.naehrwerte || {};
          const rows = [
            { label: "Kcal:", value: nv.kalorien ?? "-" },
            { label: "Fett:", value: (nv.fett != null ? nv.fett + "g" : "-") },
            { label: "Kohlenhydrate:", value: (nv.kohlenhydrate != null ? nv.kohlenhydrate + "g" : "-") },
            { label: "Protein:", value: (nv.protein != null ? nv.protein + "g" : "-") }
          ];
          rows.forEach(r => {
            const rowDiv = document.createElement("div");
            rowDiv.className = "row";
            rowDiv.innerHTML = `<span>${r.label}</span><span>${r.value}</span>`;
            card.appendChild(rowDiv);
          });

          container.appendChild(card);
        });

      } catch (err) {
        console.error(err);
        const msg = document.createElement("div");
        msg.className = "no-recipes";
        msg.textContent = "Fehler beim Laden der Rezepte.";
        container.appendChild(msg);
      }
    }

    // ========================================================
    // 3) Zutaten (Produkte) in die Einkaufsliste √ºbertragen
    //    und in localStorage ablegen
    // ========================================================
    function addProductsToShoppingList(produkteArray) {
      // Holen: bestehende Einkaufsliste (Array von Objekten) oder leeres Array
      const existing = JSON.parse(localStorage.getItem("shoppingList") || "[]");

      // F√ºr jedes Produkt-Objekt {produkt: "...", menge: "..."} aus recipes.json
      produkteArray.forEach(item => {
        // Pr√ºfen, ob das Produkt bereits in der Liste existiert:
        // Wir vergleichen nur nach Produkt-Name (item.produkt). 
        // Wenn es schon existiert, dann einfach nicht noch einmal hinzuf√ºgen.
        const exists = existing.some(e => e.produkt === item.produkt);
        if (!exists) {
          existing.push({
            produkt: item.produkt,
            menge: item.menge,
            checked: false
          });
        }
      });

      // Speichern der aktualisierten Liste
      localStorage.setItem("shoppingList", JSON.stringify(existing));
      alert("Zutaten wurden der Einkaufsliste hinzugef√ºgt!");
    }

    // ========================================================
    // Beim Laden der Seite: einmal eigene und empfohlene Rezepte laden
    // ========================================================
    window.addEventListener("DOMContentLoaded", () => {
      loadOwnRecipes();
      loadRecommendedRecipes();
    });

  </script>
</body>
</html>

----

Meilenstein2\SmartNutritionPlanner\frontend\public\recipes.json
{
  "Omnivor": {
    "Fr√ºhst√ºck": {
      "name": "R√ºhrei mit Speck",
      "produkte": [
        {
          "produkt": "Eier",
          "menge": "2 St√ºck"
        },
        {
          "produkt": "Speck",
          "menge": "50 g"
        },
        {
          "produkt": "Butter",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 350,
        "protein": 20,
        "fett": 30,
        "kohlenhydrate": 1
      }
    },
    "Mittagessen": {
      "name": "H√§hnchenbrust mit Reis und Gem√ºse",
      "produkte": [
        {
          "produkt": "H√§hnchenbrust",
          "menge": "200 g"
        },
        {
          "produkt": "Reis (ungekocht)",
          "menge": "100 g"
        },
        {
          "produkt": "Brokkoli",
          "menge": "150 g"
        },
        {
          "produkt": "Oliven√∂l",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 600,
        "protein": 45,
        "fett": 15,
        "kohlenhydrate": 60
      }
    },
    "Abendessen": {
      "name": "Rindersteak mit Kartoffeln und Salat",
      "produkte": [
        {
          "produkt": "Rindersteak",
          "menge": "200 g"
        },
        {
          "produkt": "Kartoffeln",
          "menge": "200 g"
        },
        {
          "produkt": "Salatmix",
          "menge": "100 g"
        },
        {
          "produkt": "Dressing (Oliven√∂l & Essig)",
          "menge": "20 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 700,
        "protein": 50,
        "fett": 35,
        "kohlenhydrate": 50
      }
    }
  },
  "Vegan": {
    "Fr√ºhst√ºck": {
      "name": "Haferbrei mit Banane",
      "produkte": [
        {
          "produkt": "Haferflocken",
          "menge": "50 g"
        },
        {
          "produkt": "Sojamilch",
          "menge": "200 ml"
        },
        {
          "produkt": "Banane",
          "menge": "1 St√ºck"
        },
        {
          "produkt": "Leinsamen",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 350,
        "protein": 12,
        "fett": 8,
        "kohlenhydrate": 60
      }
    },
    "Mittagessen": {
      "name": "Linsensuppe mit Vollkornbrot",
      "produkte": [
        {
          "produkt": "Rote Linsen",
          "menge": "100 g"
        },
        {
          "produkt": "Karotten",
          "menge": "50 g"
        },
        {
          "produkt": "Zwiebel",
          "menge": "50 g"
        },
        {
          "produkt": "Tomaten",
          "menge": "100 g"
        },
        {
          "produkt": "Gem√ºsebr√ºhe",
          "menge": "500 ml"
        },
        {
          "produkt": "Vollkornbrot",
          "menge": "60 g (2 Scheiben)"
        }
      ],
      "naehrwerte": {
        "kalorien": 500,
        "protein": 25,
        "fett": 6,
        "kohlenhydrate": 80
      }
    },
    "Abendessen": {
      "name": "Tofu-Gem√ºse-Pfanne",
      "produkte": [
        {
          "produkt": "Tofu",
          "menge": "150 g"
        },
        {
          "produkt": "Paprika",
          "menge": "100 g"
        },
        {
          "produkt": "Zucchini",
          "menge": "100 g"
        },
        {
          "produkt": "Sojaso√üe",
          "menge": "20 g"
        },
        {
          "produkt": "Reis (ungekocht)",
          "menge": "100 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 550,
        "protein": 25,
        "fett": 20,
        "kohlenhydrate": 65
      }
    }
  },
  "Vegetarisch": {
    "Fr√ºhst√ºck": {
      "name": "Joghurt mit Fr√ºchten und M√ºsli",
      "produkte": [
        {
          "produkt": "Naturjoghurt",
          "menge": "150 g"
        },
        {
          "produkt": "Obstmix (Beeren)",
          "menge": "100 g"
        },
        {
          "produkt": "M√ºsli",
          "menge": "50 g"
        },
        {
          "produkt": "Honig",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 300,
        "protein": 12,
        "fett": 8,
        "kohlenhydrate": 45
      }
    },
    "Mittagessen": {
      "name": "Gem√ºse-Lasagne",
      "produkte": [
        {
          "produkt": "Lasagnebl√§tter",
          "menge": "100 g"
        },
        {
          "produkt": "Zucchini",
          "menge": "100 g"
        },
        {
          "produkt": "Aubergine",
          "menge": "100 g"
        },
        {
          "produkt": "Tomatensauce",
          "menge": "150 g"
        },
        {
          "produkt": "Mozzarella",
          "menge": "100 g"
        },
        {
          "produkt": "Parmesan",
          "menge": "20 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 650,
        "protein": 30,
        "fett": 30,
        "kohlenhydrate": 60
      }
    },
    "Abendessen": {
      "name": "Kichererbsensalat mit Feta",
      "produkte": [
        {
          "produkt": "Kichererbsen (gekocht)",
          "menge": "200 g"
        },
        {
          "produkt": "Paprika",
          "menge": "100 g"
        },
        {
          "produkt": "Gurke",
          "menge": "100 g"
        },
        {
          "produkt": "Feta",
          "menge": "50 g"
        },
        {
          "produkt": "Oliven√∂l",
          "menge": "10 g"
        },
        {
          "produkt": "Zitronensaft",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 450,
        "protein": 18,
        "fett": 18,
        "kohlenhydrate": 50
      }
    }
  }
}

----

Meilenstein2\SmartNutritionPlanner\frontend\public\shopping-list.html
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Einkaufsliste</title>
  <style>
    :root {
      --primary: #4CAF50;
      --danger: #d32f2f;
      --bg: #f4f4f4;
    }

    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: var(--bg);
      color: #333;
      padding-bottom: 120px;
    }

    header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      background-color: var(--primary);
      color: white;
    }

    .menu-icon {
      font-size: 1.5rem;
      cursor: pointer;
    }

    .sidebar {
      position: fixed;
      top: 0;
      left: -70%;
      width: 70%;
      height: 100%;
      background-color: #333;
      color: white;
      padding: 2rem 1rem;
      transition: left 0.3s ease-in-out;
      z-index: 1000;
    }

    .sidebar.active {
      left: 0;
    }

    .sidebar nav a {
      display: block;
      color: white;
      padding: 1rem 0;
      text-decoration: none;
      border-bottom: 1px solid #555;
    }

    .section {
      padding: 1rem;
    }

    .add-area {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .add-area input {
      flex: 1;
      padding: 0.5rem;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    .add-area button {
      padding: 0.5rem 1rem;
      font-size: 1rem;
      background-color: var(--primary);
      color: white;
      border: none;
      border-radius: 5px;
    }

    ul {
      list-style: none;
      padding: 0;
      margin-top: 1rem;
    }

    li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.7rem;
      background: white;
      border-radius: 5px;
      margin-bottom: 0.5rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      cursor: pointer;
      transition: all 0.2s;
    }

    li.checked {
      text-decoration: line-through;
      color: gray;
      background-color: #e0e0e0;
    }

    .item-text {
      flex: 1;
    }

    .delete-checked-btn {
      margin-top: 1rem;
      padding: 0.7rem;
      width: 100%;
      background-color: var(--secondary);
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 1rem;
    }

    .btn-row {
      display: flex;
      justify-content: space-between;
      gap: 1rem;
      margin-top: 1rem;
    }

    .btn-row button {
      flex: 1;
      padding: 0.8rem;
      font-size: 1rem;
      border: none;
      border-radius: 5px;
      color: white;
    }

    .btn-clear {
      background-color: var(--danger);
    }

    .btn-save {
      background-color: var(--primary);
    }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <nav>
      <a href="/public/index.html">Home</a>
      <a href="/public/add-product.html">Artikel hinzuf√ºgen</a>
      <a href="/public/recipes.html">Rezepte</a>
      <a href="/public/create-recipe.html">Rezept erstellen</a>
      <a href="/public/shopping-list.html">Einkaufsliste</a>
      <a href="/public/info.html">Infoseite</a>
      <a href="/public/account.html">Konto</a>
    </nav>
  </div>

  <!-- Header -->
  <header>
    <span class="menu-icon" onclick="toggleMenu()">‚ò∞</span>
    <h2>Einkaufsliste</h2>
  </header>

  <!-- Main Section -->
  <div class="section">
    <!-- Manuelle Produkteingabe -->
    <div class="add-area">
      <input type="text" id="itemInput" placeholder="Neues Produkt eingeben‚Ä¶ (z.B. Tomaten ‚Äì 500 g)" />
      <button onclick="addManualItem()">‚ûï</button>
    </div>

    <!-- Dynamische Liste -->
    <ul id="shoppingList"></ul>

    <!-- Button zum L√∂schen aller abgehakten Eintr√§ge -->
    <button class="delete-checked-btn" onclick="deleteCheckedItems()">‚úîÔ∏è Abgehakte l√∂schen</button>

    <!-- Bestehende Buttons: Ganze Liste l√∂schen / Speichern -->
    <div class="btn-row">
      <button class="btn-clear" onclick="clearList()">üóëÔ∏è Alle l√∂schen</button>
      <button class="btn-save" onclick="saveList()">üíæ Speichern</button>
    </div>
  </div>

  <script>
    const listElement = document.getElementById("shoppingList");

    function toggleMenu() {
      document.getElementById("sidebar").classList.toggle("active");
    }

    // ========================================================
    // 1) Ein neues Produkt manuell hinzuf√ºgen
    //    (Nutzer gibt z.B. "Tomaten ‚Äì 500 g" oder nur "Milch" ein)
    // ========================================================
    function addManualItem() {
      const input = document.getElementById("itemInput");
      const raw = input.value.trim();
      if (!raw) return;

      // Wenn Nutzer keine Trennung angibt, speichern wir alles in produkt-Feld, menge leer
      let produkt = raw;
      let menge = "";
      // Leerzeichen-Bindestrich-Leerzeichen als Trennzeichen "‚Äì" oder "-"
      if (raw.includes(" ‚Äì ")) {
        const parts = raw.split(" ‚Äì ");
        produkt = parts[0].trim();
        menge = parts[1].trim();
      } else if (raw.includes(" - ")) {
        const parts = raw.split(" - ");
        produkt = parts[0].trim();
        menge = parts[1].trim();
      }

      const newItem = { produkt, menge, checked: false };

      // Aktuelle Liste holen, Item anh√§ngen, speichern und neu rendern
      const data = JSON.parse(localStorage.getItem("shoppingList") || "[]");
      data.push(newItem);
      localStorage.setItem("shoppingList", JSON.stringify(data));

      appendListItem(newItem);
      input.value = "";
    }

    // ========================================================
    // 2) Die gesamte Liste aus localStorage holen und rendern
    // ========================================================
    function loadList() {
      const data = JSON.parse(localStorage.getItem("shoppingList") || "[]");
      listElement.innerHTML = "";
      data.forEach(item => appendListItem(item));
    }

    // Hilfsfunktion: Ein einzelnes <li> f√ºr ein Objekt erstellen
    function appendListItem(itemData) {
      const li = document.createElement("li");
      // Anzeigen: "Produkt ‚Äì Menge" (wenn Menge leer, zeigt nur Produkt)
      li.innerHTML = `
        <span class="item-text">${itemData.produkt}${itemData.menge ? " ‚Äì " + itemData.menge : ""}</span>
      `;
      if (itemData.checked) {
        li.classList.add("checked");
      }
      // Klick auf das <li> toggelt checked-Klasse und aktualisiert localStorage
      li.onclick = () => {
        li.classList.toggle("checked");
        updateItemCheckedStatus(itemData.produkt, itemData.menge, li.classList.contains("checked"));
      };
      listElement.appendChild(li);
    }

    // ========================================================
    // 3) Wenn ein Eintrag angeklickt wird: checked-Status aktualisieren
    // ========================================================
    function updateItemCheckedStatus(produkt, menge, isChecked) {
      const data = JSON.parse(localStorage.getItem("shoppingList") || "[]");
      // Suche nach dem entsprechenden Objekt (Match nach Produkt-Name + Menge)
      for (let obj of data) {
        if (obj.produkt === produkt && obj.menge === menge) {
          obj.checked = isChecked;
          break;
        }
      }
      localStorage.setItem("shoppingList", JSON.stringify(data));
    }

    // ========================================================
    // 4) Abgehakte Eintr√§ge l√∂schen
    // ========================================================
    function deleteCheckedItems() {
      let data = JSON.parse(localStorage.getItem("shoppingList") || "[]");
      data = data.filter(obj => !obj.checked);
      localStorage.setItem("shoppingList", JSON.stringify(data));
      loadList();
    }

    // ========================================================
    // 5) Gesamte Liste l√∂schen (Button: ‚ÄûüóëÔ∏è Alle l√∂schen‚Äú)
    // ========================================================
    function clearList() {
      if (confirm("Liste wirklich komplett l√∂schen?")) {
        listElement.innerHTML = "";
        localStorage.removeItem("shoppingList");
      }
    }

    // ========================================================
    // 6) Liste speichern (Button: ‚Äûüíæ Speichern‚Äú)
    // ========================================================
    function saveList() {
      // Da wir bei jedem Klick bereits den checked-Status in localStorage updaten,
      // reicht es, dem Nutzer eine Best√§tigung zu geben:
      alert("Liste gespeichert!");
    }

    // Beim Laden der Seite: einmal komplette Liste rendern
    window.addEventListener("DOMContentLoaded", loadList);
  </script>
</body>
</html>
