Meilenstein2\SmartNutritionPlanner\frontend\public\create-recipe.html
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Rezept erstellen</title>
  <style>
    :root {
      --primary: #4CAF50;
      --bg: #f4f4f4;
      --input-bg: #fff;
      --input-border: #ccc;
      --input-radius: 5px;
      --input-padding: 0.6rem 0.8rem;
    }

    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: var(--bg);
      color: #333;
      padding-bottom: 150px;
    }

    header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      background-color: var(--primary);
      color: white;
    }

    .menu-icon {
      font-size: 1.5rem;
      cursor: pointer;
    }

    .sidebar {
      position: fixed;
      top: 0;
      left: -70%;
      width: 70%;
      height: 100%;
      background-color: #333;
      color: white;
      padding: 2rem 1rem;
      transition: left 0.3s ease-in-out;
      z-index: 1000;
    }

    .sidebar.active {
      left: 0;
    }

    .sidebar nav a {
      display: block;
      color: white;
      padding: 1rem 0;
      text-decoration: none;
      border-bottom: 1px solid #555;
    }

    .icon-button {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1.3rem;
      color: white;
    }

    .section {
      padding: 1rem;
    }

    /* ********** Rezeptname-Styling ********** */
    .recipe-name-wrapper {
      margin-bottom: 1rem;
    }
    .recipe-name-wrapper label {
      display: block;
      font-weight: bold;
      margin-bottom: 0.5rem;
      font-size: 1rem;
    }
    .recipe-name-input {
      width: 100%;
      background-color: var(--input-bg);
      border: 1px solid var(--input-border);
      border-radius: var(--input-radius);
      padding: var(--input-padding);
      font-size: 1rem;
      color: #333;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }
    .recipe-name-input::placeholder {
      color: #888;
    }
    .recipe-name-input:focus {
      border-color: var(--primary);
      outline: none;
      box-shadow: 0 0 4px rgba(76, 175, 80, 0.3);
    }
    /* **************************************** */

    /* Suchbereich */
    .search-section {
      display: flex;
      flex-wrap: wrap;
      padding: 1rem;
      gap: 0.5rem;
      background-color: white;
      border-radius: 5px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      margin-bottom: 1rem;
    }

    .search-section input[type="text"],
    .search-section input[type="number"] {
      flex: 1;
      padding: 0.5rem;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 5px;
      background-color: #fff;
      color: #333;
    }

    .search-section input::placeholder {
      color: #888;
    }

    .search-section input:focus {
      border-color: var(--primary);
      outline: none;
      box-shadow: 0 0 4px rgba(76,175,80,0.3);
    }

    .search-section button {
      background: var(--primary);
      border: none;
      padding: 0.5rem 0.8rem;
      border-radius: 5px;
      color: white;
      font-size: 1.2rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .search-section button:hover {
      background: #45a049;
    }

    .search-section button.camera-btn {
      background: none;
      font-size: 1.5rem;
      padding: 0.4rem;
      border-radius: 50%;
      border: 2px solid var(--primary);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .search-section button.camera-btn:hover {
      background: var(--primary);
      color: white;
    }

    .search-section input:focus + button {
      border-color: var(--primary);
      background: #4CAF50;
      color: white;
    }

    .section-title {
      font-weight: bold;
      margin: 1rem 0 0.3rem;
      font-size: 1.1rem;
    }

    .card-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .product-card {
      background: white;
      padding: 1rem;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      position: relative;
    }

    .product-card h3 {
      margin-bottom: 0.5rem;
      font-size: 1.1rem;
    }

    .row {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      margin: 2px 0;
    }

    .remove-icon {
      display: none;
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 1.3rem;
      color: var(--danger);
      cursor: pointer;
    }

    .remove-mode .remove-icon {
      display: block;
    }

    .add-button-small {
      display: inline-block;
      margin-top: 0.5rem;
      padding: 0.3rem 0.6rem;
      font-size: 0.9rem;
      background-color: var(--primary);
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    .add-button-small:hover {
      background: #45a049;
    }

    .barcode-result {
      margin-top: 1rem;
      padding: 1rem;
      background: #eef9f1;
      border-left: 5px solid var(--primary);
      border-radius: 5px;
    }

    .barcode-result p {
      margin: 0.3rem 0;
    }

    .save-button {
      position: fixed;
      bottom: 1.5rem;
      left: 50%;
      transform: translateX(-50%);
      padding: 1rem 2rem;
      background: var(--primary);
      color: white;
      font-size: 1.1rem;
      border: none;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .save-button:hover {
      background: #45a049;
    }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <nav>
      <a href="/public/index.html">Home</a>
      <a href="/public/add-product.html">Artikel hinzuf√ºgen</a>
      <a href="/public/recipes.html">Rezepte</a>
      <a href="/public/create-recipe.html">Rezept erstellen</a>
      <a href="/public/shopping-list.html">Einkaufsliste</a>
      <a href="/public/info.html">Infoseite</a>
      <a href="/public/account.html">Konto</a>
    </nav>
  </div>

  <!-- Header -->
  <header>
    <span class="menu-icon" onclick="toggleMenu()">‚ò∞</span>
    <h2>Rezept erstellen</h2>
    <button class="icon-button" onclick="toggleDeleteMode()">üóëÔ∏è</button>
  </header>

  <div class="section">
    <!-- Rezeptname mit eigenem Wrapper und ansprechendem Style -->
    <div class="recipe-name-wrapper">
      <label for="recipeName">Rezeptname:</label>
      <input type="text" id="recipeName" class="recipe-name-input" placeholder="z. B. Protein Porridge" />
    </div>

    <!-- Suchbereich analog zur "Produkt hinzuf√ºgen"-Seite -->
    <div class="search-section">
      <input type="text" id="searchInput" placeholder="Produktname eingeben‚Ä¶" />
      <button onclick="searchProduct()">üîç</button>

      <input type="number" id="barcodeInput" placeholder="Barcode eingeben‚Ä¶" />
      <button class="camera-btn" onclick="fetchProductByBarcode()">üì∑</button>
    </div>

    <div id="searchResults" class="card-list"></div>

    <div class="section-title">Produkte im Rezept</div>
    <div class="card-list" id="productList"></div>
  </div>

  <button class="save-button" onclick="saveRecipe()">üíæ Speichern</button>

  <script>
    let deleteMode = false;

    function toggleMenu() {
      document.getElementById("sidebar").classList.toggle("active");
    }

    function toggleDeleteMode() {
      deleteMode = !deleteMode;
      document.body.classList.toggle("remove-mode", deleteMode);
    }

    /**
     * Produktsuche f√ºr das Rezept:
     */
    async function searchProduct() {
      const query = document.getElementById("searchInput").value.trim();
      if (!query) return;

      try {
        const res = await fetch(`/api/search?q=${encodeURIComponent(query)}&page=1`);
        if (!res.ok) throw new Error(`Status ${res.status}`);

        const data = await res.json();
        const container = document.getElementById("searchResults");
        container.innerHTML = "";

        const products = data.products || [];
        if (products.length === 0) {
          container.innerHTML = "<p>Keine Produkte gefunden.</p>";
          return;
        }

        // Zeige bis zu 5 Ergebnisse
        products.slice(0, 5).forEach((p) => {
          const name = p.ProductName || p.product_name || "Unbenannt";
          const brand = p.Brands || p.brands || "Keine Marke";
          const barcode = p.Code || p.code || "";
          const n = p.Nutriments || p.nutriments || {};

          const kcal = parseFloat(n["energy-kcal_100g"]) || 0;
          const fat = parseFloat(n["fat_100g"]) || 0;
          const sugar = parseFloat(n["sugars_100g"]) || 0;
          const carbs = parseFloat(n["carbohydrates_100g"]) || 0;
          const protein = parseFloat(n["proteins_100g"]) || 0;

          const card = document.createElement("div");
          card.className = "product-card";
          card.innerHTML = `
            <h3>${name}</h3>
            <div class="row"><span>Marke:</span><span>${brand}</span></div>
            <div class="row"><span>Barcode:</span><span>${barcode}</span></div>
            <div class="row"><span>Kcal/100g:</span><span>${kcal}</span></div>
            <div class="row"><span>Fett:</span><span>${fat}g</span></div>
            <div class="row"><span>Zucker:</span><span>${sugar}g</span></div>
            <div class="row"><span>KH:</span><span>${carbs}g</span></div>
            <div class="row"><span>Protein:</span><span>${protein}g</span></div>
            <button class="add-button-small" onclick='addToList(${JSON.stringify({
              name,
              kcal,
              fat,
              sugar,
              carbs,
              protein
            })})'>
              ‚ûï Hinzuf√ºgen
            </button>
          `;
          container.appendChild(card);
        });
      } catch (err) {
        console.error(err);
        document.getElementById("searchResults").innerHTML =
          `<p style="color:red">Fehler: ${err.message}</p>`;
      }
    }

    /**
     * Barcode-Suche: GET /api/product/:barcode
     */
    async function fetchProductByBarcode() {
      const bc = document.getElementById("barcodeInput").value.trim();
      if (!bc) return;

      const resultContainer = document.getElementById("searchResults");
      resultContainer.innerHTML = ""; // vorher leeren

      try {
        const res = await fetch(`/api/product/${encodeURIComponent(bc)}`);
        if (!res.ok) {
          if (res.status === 404) {
            resultContainer.innerHTML = "<p>Produkt nicht gefunden.</p>";
            return;
          }
          throw new Error(`Status ${res.status}`);
        }

        const p = await res.json();
        const name = p.ProductName || p.product_name || "Unbenannt";
        const brand = p.Brands || p.brands || "Keine Marke";
        const barcode = p.Code || p.code || "";
        const n = p.Nutriments || p.nutriments || {};

        const kcal = parseFloat(n["energy-kcal_100g"]) || 0;
        const fat = parseFloat(n["fat_100g"]) || 0;
        const sugar = parseFloat(n["sugars_100g"]) || 0;
        const carbs = parseFloat(n["carbohydrates_100g"]) || 0;
        const protein = parseFloat(n["proteins_100g"]) || 0;

        const box = document.createElement("div");
        box.className = "barcode-result";
        box.innerHTML = `
          <h3>${name}</h3>
          <p><strong>Marke:</strong> ${brand}</p>
          <p><strong>Barcode:</strong> ${barcode}</p>
          <p><strong>Kcal/100g:</strong> ${kcal} kcal</p>
          <p><strong>Fett/100g:</strong> ${fat} g</p>
          <p><strong>Zucker/100g:</strong> ${sugar} g</p>
          <p><strong>KH/100g:</strong> ${carbs} g</p>
          <p><strong>Protein/100g:</strong> ${protein} g</p>
          <button class="add-button-small" onclick='addToList(${JSON.stringify({
            name,
            kcal,
            fat,
            sugar,
            carbs,
            protein
          })})'>
            ‚ûï Hinzuf√ºgen
          </button>
        `;
        resultContainer.appendChild(box);
      } catch (err) {
        console.error(err);
        resultContainer.innerHTML = `<p style="color:red">Fehler: ${err.message}</p>`;
      }
    }

    function addToList(product) {
      const list = document.getElementById("productList");

      const card = document.createElement("div");
      card.className = "product-card";
      card.innerHTML = `
        <span class="remove-icon" onclick="this.parentElement.remove()">‚ûñ</span>
        <h3>${product.name}</h3>
        <div class="row"><span>Kcal/100g:</span><span>${product.kcal}</span></div>
        <div class="row"><span class="result fat">Fett:</span><span>${product.fat}g</span></div>
        <div class="row"><span class="result sugar">Zucker:</span><span>${product.sugar}g</span></div>
        <div class="row"><span class="result carbs">KH:</span><span>${product.carbs}g</span></div>
        <div class="row"><span class="result protein">Protein:</span><span>${product.protein}g</span></div>
        <div class="row">
          <span>Menge:</span>
          <span><input type="number" min="1" value="100"
            onchange="calculate(this, ${product.kcal}, ${product.fat}, ${product.sugar}, ${product.carbs}, ${product.protein})" /> g</span>
        </div>
        <div class="row"><strong>Berechnet:</strong> <span class="result kcal">${Math.round(product.kcal)} kcal</span></div>
      `;
      list.appendChild(card);
    }

    function calculate(input, kcalPer100, fatPer100, sugarPer100, carbsPer100, proteinPer100) {
      const g = parseFloat(input.value) || 0;
      const kcal = Math.round((kcalPer100 * g) / 100);
      const fat = Math.round((fatPer100 * g) / 100);
      const sugar = Math.round((sugarPer100 * g) / 100);
      const carbs = Math.round((carbsPer100 * g) / 100);
      const protein = Math.round((proteinPer100 * g) / 100);
      const result = input.closest(".product-card");
      result.querySelector(".result.kcal").textContent = `${kcal} kcal`;
      result.querySelector(".result.fat").textContent = `${fat} g`;
      result.querySelector(".result.sugar").textContent = `${sugar} g`;
      result.querySelector(".result.carbs").textContent = `${carbs} g`;
      result.querySelector(".result.protein").textContent = `${protein} g`;
    }

    function saveRecipe() {
      const name = document.getElementById("recipeName").value.trim();
      if (!name) return alert("Bitte Rezeptnamen eingeben.");

      const cards = document.querySelectorAll(".product-card");
      if (cards.length === 0) return alert("Bitte mindestens ein Produkt hinzuf√ºgen.");

      const products = Array.from(cards).map(card => {
        return {
          name: card.querySelector("h3").textContent,
          kcal: card.querySelector(".result.kcal").textContent.replace(" kcal", "")
        };
      });

      const newRecipe = {
        name,
        products,
        timestamp: Date.now()
      };
      const existing = JSON.parse(localStorage.getItem("ownRecipes") || "[]");
      existing.push(newRecipe);
      localStorage.setItem("ownRecipes", JSON.stringify(existing));

      alert("Rezept gespeichert!");
      window.location.href = "/public/recipes.html";
    }
  </script>
</body>
</html>

----


Meilenstein2\SmartNutritionPlanner\frontend\public\recipes.json
{
  "Omnivor": {
    "Fr√ºhst√ºck": {
      "name": "R√ºhrei mit Speck",
      "produkte": [
        {
          "produkt": "Eier",
          "menge": "2 St√ºck"
        },
        {
          "produkt": "Speck",
          "menge": "50 g"
        },
        {
          "produkt": "Butter",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 350,
        "protein": 20,
        "fett": 30,
        "kohlenhydrate": 1
      }
    },
    "Mittagessen": {
      "name": "H√§hnchenbrust mit Reis und Gem√ºse",
      "produkte": [
        {
          "produkt": "H√§hnchenbrust",
          "menge": "200 g"
        },
        {
          "produkt": "Reis (ungekocht)",
          "menge": "100 g"
        },
        {
          "produkt": "Brokkoli",
          "menge": "150 g"
        },
        {
          "produkt": "Oliven√∂l",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 600,
        "protein": 45,
        "fett": 15,
        "kohlenhydrate": 60
      }
    },
    "Abendessen": {
      "name": "Rindersteak mit Kartoffeln und Salat",
      "produkte": [
        {
          "produkt": "Rindersteak",
          "menge": "200 g"
        },
        {
          "produkt": "Kartoffeln",
          "menge": "200 g"
        },
        {
          "produkt": "Salatmix",
          "menge": "100 g"
        },
        {
          "produkt": "Dressing (Oliven√∂l & Essig)",
          "menge": "20 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 700,
        "protein": 50,
        "fett": 35,
        "kohlenhydrate": 50
      }
    }
  },
  "Vegan": {
    "Fr√ºhst√ºck": {
      "name": "Haferbrei mit Banane",
      "produkte": [
        {
          "produkt": "Haferflocken",
          "menge": "50 g"
        },
        {
          "produkt": "Sojamilch",
          "menge": "200 ml"
        },
        {
          "produkt": "Banane",
          "menge": "1 St√ºck"
        },
        {
          "produkt": "Leinsamen",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 350,
        "protein": 12,
        "fett": 8,
        "kohlenhydrate": 60
      }
    },
    "Mittagessen": {
      "name": "Linsensuppe mit Vollkornbrot",
      "produkte": [
        {
          "produkt": "Rote Linsen",
          "menge": "100 g"
        },
        {
          "produkt": "Karotten",
          "menge": "50 g"
        },
        {
          "produkt": "Zwiebel",
          "menge": "50 g"
        },
        {
          "produkt": "Tomaten",
          "menge": "100 g"
        },
        {
          "produkt": "Gem√ºsebr√ºhe",
          "menge": "500 ml"
        },
        {
          "produkt": "Vollkornbrot",
          "menge": "60 g (2 Scheiben)"
        }
      ],
      "naehrwerte": {
        "kalorien": 500,
        "protein": 25,
        "fett": 6,
        "kohlenhydrate": 80
      }
    },
    "Abendessen": {
      "name": "Tofu-Gem√ºse-Pfanne",
      "produkte": [
        {
          "produkt": "Tofu",
          "menge": "150 g"
        },
        {
          "produkt": "Paprika",
          "menge": "100 g"
        },
        {
          "produkt": "Zucchini",
          "menge": "100 g"
        },
        {
          "produkt": "Sojaso√üe",
          "menge": "20 g"
        },
        {
          "produkt": "Reis (ungekocht)",
          "menge": "100 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 550,
        "protein": 25,
        "fett": 20,
        "kohlenhydrate": 65
      }
    }
  },
  "Vegetarisch": {
    "Fr√ºhst√ºck": {
      "name": "Joghurt mit Fr√ºchten und M√ºsli",
      "produkte": [
        {
          "produkt": "Naturjoghurt",
          "menge": "150 g"
        },
        {
          "produkt": "Obstmix (Beeren)",
          "menge": "100 g"
        },
        {
          "produkt": "M√ºsli",
          "menge": "50 g"
        },
        {
          "produkt": "Honig",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 300,
        "protein": 12,
        "fett": 8,
        "kohlenhydrate": 45
      }
    },
    "Mittagessen": {
      "name": "Gem√ºse-Lasagne",
      "produkte": [
        {
          "produkt": "Lasagnebl√§tter",
          "menge": "100 g"
        },
        {
          "produkt": "Zucchini",
          "menge": "100 g"
        },
        {
          "produkt": "Aubergine",
          "menge": "100 g"
        },
        {
          "produkt": "Tomatensauce",
          "menge": "150 g"
        },
        {
          "produkt": "Mozzarella",
          "menge": "100 g"
        },
        {
          "produkt": "Parmesan",
          "menge": "20 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 650,
        "protein": 30,
        "fett": 30,
        "kohlenhydrate": 60
      }
    },
    "Abendessen": {
      "name": "Kichererbsensalat mit Feta",
      "produkte": [
        {
          "produkt": "Kichererbsen (gekocht)",
          "menge": "200 g"
        },
        {
          "produkt": "Paprika",
          "menge": "100 g"
        },
        {
          "produkt": "Gurke",
          "menge": "100 g"
        },
        {
          "produkt": "Feta",
          "menge": "50 g"
        },
        {
          "produkt": "Oliven√∂l",
          "menge": "10 g"
        },
        {
          "produkt": "Zitronensaft",
          "menge": "10 g"
        }
      ],
      "naehrwerte": {
        "kalorien": 450,
        "protein": 18,
        "fett": 18,
        "kohlenhydrate": 50
      }
    }
  }
}
